# -*- coding: utf-8 -*-
"""EDA-Splendor Hotel Groups (SHG) Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FYSKWhmwNAHMdY109MwWOvdx7zO8XRmu

# ANALYSIS BY STANLEY UZUM
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from pandas import Timestamp
import warnings
import plotly.graph_objects as go
import plotly.offline as pyo
import plotly.io as pio
import sklearn
import plotly.express as ex
warnings.filterwarnings('ignore')

data = pd.read_excel("C:/Users/Biggest/Downloads/SHG_Booking_Data.xlsx")

data

"""# Data Interaction"""

data.info()

data.nunique()

"""# Handling Null values"""

data.isnull().sum()

#Checking percentage of null values

(data.isnull().sum()/(len(data)))*100

data.isnull().sum().max()

#Dropping Null values

data = data.dropna()

#rechecking for null values
data.isnull().sum()

data['Revenue'].describe()

data['Revenue'].sum()

data['Revenue Loss'].sum()

"""# Checking for entry/input error"""

data['Country'].unique()

print(data['Booking Date'].unique())
print(data['Arrival Date'].unique())
print(data['Status Update'].unique())

"""# DATA REDUCTION"""

data.drop(['Booking ID', 'Status Update'], axis=1, inplace = True) #dropping the 'Booking ID' colunm as it's not need for analysis

data

"""# FEATURE ENGINEERING

to further explore/ analyze booking date, we need to split it into Year, Month and Day
"""

#Converting a timestamp colunm into string so we can extract 'Year as Yr', 'Month as Mth', 'Date as Dy'

df=data['Booking Date'].astype(str)

#extract 'Year as Booking Year', 'Month as Booking Month', 'Day as Booking Day'

data['Booking Year'] = df.apply(lambda x: x.split("-")[0])
data['Booking Month'] = df.apply(lambda x: x.split("-")[1])
data['Booking Day'] = df.apply(lambda x: x.split("-")[2])

#print our new data
data

# Convert strings back to integer

data['Booking Year'] = data['Booking Year'].astype('int')
data['Booking Month'] = data['Booking Month'].astype('int')
data['Booking Day'] = data['Booking Day'].astype('int')

# Checking for change in datatype

data.info()

"""# EXPLORATORY DATA ANALYSIS [EDA]"""

data.describe(include = 'all').T

"""# OBSERVATIONS

 - The Hotel in the city is the most used hotel from 2013 to 2017.
 - The longest lead time is 737 days, while mean lead time is 104 days.
 - Online Travel Agent has been the most sucessful distribution channel with 73991 bookings from them.
 - 89174 - The Org. has more Transient Customer Type.
 - Of the unique 174 countries, The hotel has more customers from Portugal, with 48590 from the country.
 - Customers prefer to make no deposit.
 - 5400.0 - the highest reveue made by the hotel.
"""

# separating Numerical and categorical variables for easy analysis

cat_cols=data.select_dtypes(include=['object']).columns
num_cols = data.select_dtypes(include=np.number).columns.tolist()
print("Categorical Variables:")
print(cat_cols)
print("Numerical Variables:")
print(num_cols)

"""# UIVARIATE ANALYSIS"""

# checking for skewness and outliers in our numeric variable

for col in num_cols:
    print(col)
    print('Skew :', round(data[col].skew(), 2))
    plt.figure(figsize = (15, 4))
    plt.subplot(1, 2, 1)
    data[col].hist(grid=False)
    plt.ylabel('count')
    plt.subplot(1, 2, 2)
    sns.boxplot(x=data[col])
    plt.show()

"""# OBSERVATIONS

 - HIGHLY SKEWED(RIGHT) - Guests, Avg Daily Rate


 - HIGHLY SKEWED(LEFT) - None

 - SLIGHTLY SKEWED(RIGHT) - Lead Time, Nights, Revenue

 - SLIGHTLY SKEWED(LEFT) - Revenue Loss

"""

data.hist(bins = 30, figsize = (12, 8))
plt.show()

"""# OBSERVATIONS

 - The Hotel has the highest booking in 2016 with about 50,900 bookings in the year.
 - The Hotel has a low level of cancellation, with almost 80,000 proceeds to about 45,000 cancellations .
"""

fig, axes = plt.subplots(3, 2, figsize = (110, 110))
sns.set_style('whitegrid')
fig.suptitle('Bar plot for all categorical variables in the dataset')

ax1 = sns.countplot(ax = axes[0, 0], x = 'Hotel', data = data, palette = 'RdBu_r',
              order = data['Hotel'].value_counts().head(10).index);
total = data['Hotel'].count()
ax1.bar_label(ax.containers[0], fmt=lambda x: f'{(x/total)*100:.1f}%')

ax2 = sns.countplot(ax = axes[0, 1], x = 'Distribution Channel', data = data, palette = 'rainbow',
             order = data['Distribution Channel'].value_counts().head(10).index);
total = data['Distribution Channel'].count()
ax2.bar_label(ax.containers[0], fmt=lambda x: f'{(x/total)*100:.1f}%')

ax3 = sns.countplot(ax = axes[1, 0], x = 'Customer Type', data = data, palette="Set1",
             order = data['Customer Type'].value_counts().head(10).index);
total = data['Customer Type'].count()
ax3.bar_label(ax.containers[0], fmt=lambda x: f'{(x/total)*100:.1f}%')

ax4 = sns.countplot(ax = axes[1, 1], x = 'Country', data = data, palette="PuOr",
              order = data['Country'].value_counts().head(10).index);
total = data['Country'].count()
ax4.bar_label(ax.containers[0], fmt=lambda x: f'{(x/total)*100:.1f}%')

ax5 = sns.countplot(ax = axes[2, 0], x = 'Deposit Type', data = data, color = 'blue',
             order = data['Deposit Type'].value_counts().head(10).index);
total = data['Deposit Type'].count()
ax5.bar_label(ax.containers[0], fmt=lambda x: f'{(x/total)*100:.1f}%')

ax6 =sns.countplot(ax = axes[2, 1], x = 'Status', data = data, palette="RdBu",
             order = data['Status'].value_counts().head(10).index);
total = data['Status'].count()
ax6.bar_label(ax.containers[0], fmt=lambda x: f'{(x/total)*100:.1f}%')

axes[0][1].tick_params(labelrotation=18);
axes[1][1].tick_params(labelrotation=18);


plt.rc('font', size=100)
plt.rc('axes', titlesize=100)
plt.rc('axes', labelsize=100)
plt.rc('xtick', labelsize=100)
plt.rc('ytick', labelsize=100)

"""# OBSERVATION

 - 62.9% of total bookigas comes from the city hotel, making it the most used/booked hotel.
 - Travel Agents is the most sucessful Distribution Channel category, with 62.9% booking rate.
 - 36.1% of total ookings comes from Portugal, making it the successful booking country.

"""

figsize = (120, 110)
cols = ['Booking Day', 'Booking Month', 'Booking Year']

for i in cols:
    if i == 'Booking Year':
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))  # Set figsize here
        fig.suptitle('Booking Year', fontsize=20)
        plt.style.use('seaborn')
        plt.subplot(1, 2, 1)
        data['Booking Year'].value_counts().plot(kind='bar', color=sns.color_palette("tab10"))
        plt.subplot(1, 2, 2)
        data['Booking Year'].value_counts().plot(kind='pie', autopct="%.2f%%")
        plt.show()
    else:
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))  # Set figsize here
        fig.suptitle(' ' + i + ' ', fontsize=20)
        plt.style.use('seaborn')
        plt.subplot(1, 2, 1)
        data[i].value_counts().plot(kind='bar', color=sns.color_palette("tab10"))
        plt.subplot(1, 2, 2)
        data[i].value_counts().plot(kind='pie', autopct="%.2f%%")
        plt.show()
        plt.rc('font', size=8)

"""# OBSERVATION

 - Most Busy date - 17th
 - Most Busy Month - January
 - Most Busy Year - 2016

# BiVARIATE ANALYSIS
"""

# Calculate average profit for each category
avg_profit = data.groupby('Distribution Channel')['Revenue'].mean().reset_index()

# Plotting
plt.figure(figsize=(10, 6))
plt.bar(avg_profit['Distribution Channel'], avg_profit['Revenue'], color='skyblue')
plt.xlabel('Distribution Channel')
plt.ylabel('Average Revenue')
plt.title('Average Revenue by Distribution Channel')
plt.show()

# Calculate average profit for each category
avg_profit = data.groupby('Customer Type')['Revenue'].mean().reset_index()

# Plotting
plt.figure(figsize=(10, 6))
plt.bar(avg_profit['Customer Type'], avg_profit['Revenue'], color='skyblue')
plt.xlabel('Customer Type')
plt.ylabel('Customer Type')
plt.title('Average Revenue by Customer Type')
plt.show()

# Calculate average profit for each category
avg_profit = data.groupby('Distribution Channel')['Revenue Loss'].mean().reset_index()

# Plotting
plt.figure(figsize=(10, 6))
plt.bar(avg_profit['Distribution Channel'], avg_profit['Revenue Loss'], color='red')
plt.xlabel('Distribution Channel')
plt.ylabel('Average Revenue Loss')
plt.title('Average Revenue Loss by Distribution Channel')
plt.show()


# Calculate average profit for each category
avg_profit = data.groupby('Customer Type')['Revenue Loss'].mean().reset_index()

# Plotting
plt.figure(figsize=(10, 6))
plt.bar(avg_profit['Customer Type'], avg_profit['Revenue Loss'], color='red')
plt.xlabel('Customer Type')
plt.ylabel('Average Revenue Loss')
plt.title('Average Revenue Loss by Customer Type')
plt.show()

"""# OBSERVATION

 - Direct customers has generated more revenue than other distribution channels.
 - Contract Customers has generated more average revenue amongst other Customer Type.
 - Most loss has come from online travel agents and Transients Customer type.
"""

fig, axarr = plt.subplots(3, 2, figsize=(12, 18))
data.groupby('Hotel')['Revenue'].mean().sort_values(ascending=False).plot.bar(ax=axarr[0][0], fontsize=12)
axarr[0][0].set_title("Hotel Vs Revenue", fontsize=18)
data.groupby('Distribution Channel')['Revenue'].mean().sort_values(ascending=False).head(10).plot.bar(ax=axarr[0][1], fontsize=12)
axarr[0][1].set_title("Distribution Channel Type Vs Revenue", fontsize=18)
data.groupby('Customer Type')['Revenue'].mean().sort_values(ascending=False).head(10).plot.bar(ax=axarr[1][0], fontsize=12)
axarr[1][0].set_title("Customer Type Vs Revenue", fontsize=18)
data.groupby('Country')['Revenue'].mean().sort_values(ascending=False).head(10).plot.bar(ax=axarr[1][1], fontsize=12)
axarr[1][1].set_title("Country Vs Revenue", fontsize=18)
data.groupby('Status')['Revenue'].mean().sort_values(ascending=False).head(10).plot.bar(ax=axarr[2][0], fontsize=12)
axarr[2][0].set_title("Status Vs Revenue", fontsize=18)
data.groupby('Deposit Type')['Revenue'].mean().sort_values(ascending=False).head(10).plot.bar(ax=axarr[2][1], fontsize=12)
axarr[2][1].set_title("Deposit Type Vs Revenue", fontsize=18)
plt.subplots_adjust(hspace=1.0)
plt.subplots_adjust(wspace=.5)
sns.despine()

"""# OBSERVATION

 - Resort hotel brings more revenue than City Hotel.
 - Coperate distribution Channel generates 2nd to the last revenue for the Org,
 - Non-refundable deposit type generates as much revenue as No deposit type.

# MULTIVARIATE ANALYSIS
"""

plt.figure(figsize=(12, 7))
sns.heatmap(data.drop(['Hotel', 'Distribution Channel', 'Customer Type', 'Country',
       'Deposit Type', 'Status'],axis=1).corr(), annot = True, vmin = -1, vmax = 1)
plt.show()

data['Guests'].corr(data['Lead Time'])

data['Lead Time'].corr(data['Revenue'])

data['Lead Time'].corr(data['Revenue Loss'])

"""# OBSERVATION

 - No. Of guests has no correlation with lead Time
 - Lead Time has no correlation with Revenue generated nor Revenue loss
 - No. of night has a slight positive correlation with revenue.
 - Cancellation has an Average Negative correlation with revenue.

# ANALYSIS BY STANLEY UZUM
"""